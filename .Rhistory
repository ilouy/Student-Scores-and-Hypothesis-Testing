L = length(race_levels),    # Number of distinct race/ethnicity levels
N = nrow(data),             # Number of observations
race = as.integer(data$race_ethnicity),
reading_score = data$reading.score,
writing_score = data$writing.score,
math_score = data$math.score
)
# Define Stan model
model_code <- "
data {
int L;
int N;
int race[N];
int reading_score[N];
int writing_score[N];
int math_score[N];
}
parameters {
real mu[3, L];              // Means for each subject and race/ethnicity
real<lower=0> sigma[3, L];  // Standard deviations for each subject and race/ethnicity
}
model {
// Priors
for (i in 1:3) {
for (j in 1:L) {
mu[i, j] ~ uniform(0, 100);
sigma[i, j] ~ uniform(0, 100);
}
}
// Likelihoods
for (m in 1:N) {
reading_score[m] ~ normal(mu[1, race[m]], sigma[1, race[m]]);
writing_score[m] ~ normal(mu[2, race[m]], sigma[2, race[m]]);
math_score[m] ~ normal(mu[3, race[m]], sigma[3, race[m]]);
}
}
"
# Fit the model
fit <- stan(model_code = model_code, data = data_list, iter = 1000, chains = 4)
# Print summary of the fit
print(fit)        # All Rhats are 1
traceplot(fit)
# Extract posterior samples
posterior_samples <- extract(fit)
# Compute means for mu
mu_mean <- apply(posterior_samples$mu, c(2, 3), mean)
library(rstan)
library(ggplot2)
# Load the data
data <- read.csv("StudentsPerformance.csv")
# Encode race/ethnicity as a factor
data$race_ethnicity <- as.factor(data$race.ethnicity)
# Extract race/ethnicity levels
race_levels <- levels(data$race_ethnicity)
# Prepare data list for Stan
data_list <- list(
L = length(race_levels),    # Number of distinct race/ethnicity levels
N = nrow(data),             # Number of observations
race = as.integer(data$race_ethnicity),
reading_score = data$reading.score,
writing_score = data$writing.score,
math_score = data$math.score
)
# Define Stan model
model_code <- "
data {
int L;
int N;
int race[N];
int reading_score[N];
int writing_score[N];
int math_score[N];
}
parameters {
real<lower=0> mu[3, L];     // Means for each subject and race/ethnicity
real<lower=0> sigma[3, L];  // Standard deviations for each subject and race/ethnicity
}
model {
// Priors
for (i in 1:3) {
for (j in 1:L) {
mu[i, j] ~ uniform(0, 100);
sigma[i, j] ~ uniform(0, 100);
}
}
// Likelihoods
for (m in 1:N) {
reading_score[m] ~ normal(mu[1, race[m]], sigma[1, race[m]]);
writing_score[m] ~ normal(mu[2, race[m]], sigma[2, race[m]]);
math_score[m] ~ normal(mu[3, race[m]], sigma[3, race[m]]);
}
}
"
# Fit the model
fit <- stan(model_code = model_code, data = data_list, iter = 1000, chains = 4)
# Print summary of the fit
print(fit)        # All Rhats are 1
traceplot(fit)
# Extract posterior samples
posterior_samples <- extract(fit)
# Compute means for mu
mu_mean <- apply(posterior_samples$mu, c(2, 3), mean)
# Calculate credibility intervals for mu
mu_ci <- array(NA, dim = c(3, length(race_levels), 2))
for (i in 1:3) {
for (j in 1:length(race_levels)) {
mu_ci[i, j, ] <- quantile(posterior_samples$mu[, i, j], probs = c(0.025, 0.975))
}
}
# Convert to data frame for plotting
df <- data.frame(
Subject = rep(c("Reading", "Writing", "Math"), each = length(race_levels)),
RaceEthnicity = rep(race_levels, times = 3),
Score = c(mu_mean[1,], mu_mean[2,], mu_mean[3,]),
Lower = c(mu_ci[1, , 1], mu_ci[2, , 1], mu_ci[3, , 1]),
Upper = c(mu_ci[1, , 2], mu_ci[2, , 2], mu_ci[3, , 2])
)
# Plot the results
ggplot(df, aes(x = Subject, y = Score, fill = RaceEthnicity)) +
geom_bar(width = 0.4, stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = Lower, ymax = Upper), position = position_dodge(0.9), width = 0.25) +
theme_minimal() +
labs(title = "Estimated Test Scores by Race/Ethnicity and Subject", y = "Mean Score")
# Plot the results
ggplot(df, aes(x = Subject, y = Score, fill = RaceEthnicity)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = Lower, ymax = Upper), position = position_dodge(0.9), width = 0.25) +
theme_minimal() +
labs(title = "Estimated Test Scores by Race/Ethnicity and Subject", y = "Mean Score")
library(rstan)
library(ggplot2)
# Load the data
data <- read.csv("StudentsPerformance.csv")
# Encode race/ethnicity as a factor
data$gender_factor <- as.factor(data$gender)
# Extract gender levels
gender_levels <- levels(data$gender_factor)
# Prepare data list for Stan
data_list <- list(
L = length(race_levels),    # Number of distinct gender levels
N = nrow(data),             # Number of observations
gender = as.integer(data$gender_factor),
reading_score = data$reading.score,
writing_score = data$writing.score,
math_score = data$math.score
)
# Define Stan model
model_code <- "
data {
int L;
int N;
int race[N];
int reading_score[N];
int writing_score[N];
int math_score[N];
}
parameters {
real<lower=0> mu[3, L];     // Means for each subject and gender
real<lower=0> sigma[3, L];  // Standard deviations for each subject and gender
}
model {
// Priors
for (i in 1:3) {
for (j in 1:L) {
mu[i, j] ~ uniform(0, 100);
sigma[i, j] ~ uniform(0, 100);
}
}
// Likelihoods
for (m in 1:N) {
reading_score[m] ~ normal(mu[1, race[m]], sigma[1, race[m]]);
writing_score[m] ~ normal(mu[2, race[m]], sigma[2, race[m]]);
math_score[m] ~ normal(mu[3, race[m]], sigma[3, race[m]]);
}
}
"
# Fit the model
fit <- stan(model_code = model_code, data = data_list, iter = 1000, chains = 4)
# Print summary of the fit and inspect chains
print(fit)        # All Rhats are 1
traceplot(fit)
# Extract posterior samples
posterior_samples <- extract(fit)
# Compute means for mu
mu_mean <- apply(posterior_samples$mu, c(2, 3), mean)
library(rstan)
library(ggplot2)
# Load the data
data <- read.csv("StudentsPerformance.csv")
# Encode gender as a factor
data$gender_factor <- as.factor(data$gender)
# Extract gender levels
gender_levels <- levels(data$gender_factor)
# Prepare data list for Stan
data_list <- list(
L = length(race_levels),    # Number of distinct gender levels
N = nrow(data),             # Number of observations
gender = as.integer(data$gender_factor),
reading_score = data$reading.score,
writing_score = data$writing.score,
math_score = data$math.score
)
# Define Stan model
model_code <- "
data {
int L;
int N;
int gender[N];
int reading_score[N];
int writing_score[N];
int math_score[N];
}
parameters {
real<lower=0> mu[3, L];     // Means for each subject and gender
real<lower=0> sigma[3, L];  // Standard deviations for each subject and gender
}
model {
// Priors
for (i in 1:3) {
for (j in 1:L) {
mu[i, j] ~ uniform(0, 100);
sigma[i, j] ~ uniform(0, 100);
}
}
// Likelihoods
for (m in 1:N) {
reading_score[m] ~ normal(mu[1, gender[m]], sigma[1, gender[m]]);
writing_score[m] ~ normal(mu[2, gender[m]], sigma[2, gender[m]]);
math_score[m] ~ normal(mu[3, gender[m]], sigma[3, gender[m]]);
}
}
"
# Fit the model
fit <- stan(model_code = model_code, data = data_list, iter = 1000, chains = 4)
# Print summary of the fit and inspect chains
print(fit)        # All Rhats are 1
traceplot(fit)
# Extract posterior samples
posterior_samples <- extract(fit)
# Compute means for mu
mu_mean <- apply(posterior_samples$mu, c(2, 3), mean)
# Calculate credibility intervals for mu
mu_ci <- array(NA, dim = c(3, length(gender_levels), 2))
for (i in 1:3) {
for (j in 1:length(gender_levels)) {
mu_ci[i, j, ] <- quantile(posterior_samples$mu[, i, j], probs = c(0.025, 0.975))
}
}
# Convert to data frame for plotting
df <- data.frame(
Subject = rep(c("Reading", "Writing", "Math"), each = length(gender_levels)),
Gender = rep(gender_levels, times = 3),
Score = c(mu_mean[1,], mu_mean[2,], mu_mean[3,]),
Lower = c(mu_ci[1, , 1], mu_ci[2, , 1], mu_ci[3, , 1]),
Upper = c(mu_ci[1, , 2], mu_ci[2, , 2], mu_ci[3, , 2])
)
library(rstan)
library(ggplot2)
# Load the data
data <- read.csv("StudentsPerformance.csv")
# Encode gender as a factor
data$gender_factor <- as.factor(data$gender)
# Extract gender levels
gender_levels <- levels(data$gender_factor)
# Prepare data list for Stan
data_list <- list(
L = length(race_levels),    # Number of distinct gender levels
N = nrow(data),             # Number of observations
gender = as.integer(data$gender_factor),
reading_score = data$reading.score,
writing_score = data$writing.score,
math_score = data$math.score
)
library(rstan)
library(ggplot2)
# Load the data
data <- read.csv("StudentsPerformance.csv")
# Encode gender as a factor
data$gender_factor <- as.factor(data$gender)
# Extract gender levels
gender_levels <- levels(data$gender_factor)
# Prepare data list for Stan
data_list <- list(
L = length(gender_levels),    # Number of distinct gender levels
N = nrow(data),             # Number of observations
gender = as.integer(data$gender_factor),
reading_score = data$reading.score,
writing_score = data$writing.score,
math_score = data$math.score
)
# Define Stan model
model_code <- "
data {
int L;
int N;
int gender[N];
int reading_score[N];
int writing_score[N];
int math_score[N];
}
parameters {
real<lower=0> mu[3, L];     // Means for each subject and gender
real<lower=0> sigma[3, L];  // Standard deviations for each subject and gender
}
model {
// Priors
for (i in 1:3) {
for (j in 1:L) {
mu[i, j] ~ uniform(0, 100);
sigma[i, j] ~ uniform(0, 100);
}
}
// Likelihoods
for (m in 1:N) {
reading_score[m] ~ normal(mu[1, gender[m]], sigma[1, gender[m]]);
writing_score[m] ~ normal(mu[2, gender[m]], sigma[2, gender[m]]);
math_score[m] ~ normal(mu[3, gender[m]], sigma[3, gender[m]]);
}
}
"
# Fit the model
fit <- stan(model_code = model_code, data = data_list, iter = 1000, chains = 4)
# Print summary of the fit and inspect chains
print(fit)        # All Rhats are 1
traceplot(fit)
# Extract posterior samples
posterior_samples <- extract(fit)
# Compute means for mu
mu_mean <- apply(posterior_samples$mu, c(2, 3), mean)
# Calculate credibility intervals for mu
mu_ci <- array(NA, dim = c(3, length(gender_levels), 2))
for (i in 1:3) {
for (j in 1:length(gender_levels)) {
mu_ci[i, j, ] <- quantile(posterior_samples$mu[, i, j], probs = c(0.025, 0.975))
}
}
# Convert to data frame for plotting
df <- data.frame(
Subject = rep(c("Reading", "Writing", "Math"), each = length(gender_levels)),
Gender = rep(gender_levels, times = 3),
Score = c(mu_mean[1,], mu_mean[2,], mu_mean[3,]),
Lower = c(mu_ci[1, , 1], mu_ci[2, , 1], mu_ci[3, , 1]),
Upper = c(mu_ci[1, , 2], mu_ci[2, , 2], mu_ci[3, , 2])
)
# Plot the results
ggplot(df, aes(x = Subject, y = Score, fill = Gender)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = Lower, ymax = Upper), position = position_dodge(0.9), width = 0.25) +
theme_minimal() +
labs(title = "Estimated Test Scores by Gender and Subject", y = "Mean Score") +
geom_text(aes(label = round(Score)), vjust = 1.5, position = position_dodge(width = 0.9))
library(rstan)
library(ggplot2)
# Load the data
data <- read.csv("StudentsPerformance.csv")
# Encode subject as a factor
data$subject_factor <- factor(rep(c("Reading", "Writing", "Math"), each = nrow(data)))
# Encode subject as a factor
data$subject_factor <- factor(rep(c("Reading", "Writing", "Math"), each = nrow(data)))
library(rstan)
library(ggplot2)
# Load the data
data <- read.csv("StudentsPerformance.csv")
# Prepare data list for Stan
data_list <- list(
N = nrow(data),              # Number of observations
reading_score = data$reading.score,
writing_score = data$writing.score,
math_score = data$math.score
)
# Define Stan model
model_code <- "
data {
int N;
int reading_score[N];
int writing_score[N];
int math_score[N];
}
parameters {
real<lower=0> mu[3];     // Means for each subject
real<lower=0> sigma[3];  // Standard deviations for each subject
}
model {
// Priors
for (s in 1:3) {
mu[s] ~ uniform(0, 100);
sigma[s] ~ uniform(0, 100);
}
// Likelihoods
reading_score[n] ~ normal(mu[1], sigma[1]);
writing_score[n] ~ normal(mu[2], sigma[2]);
math_score[n] ~ normal(mu[3], sigma[3]);
}
"
# Fit the model
fit <- stan(model_code = model_code, data = data_list, iter = 1000, chains = 4)
# Define Stan model
model_code <- "
data {
int N;
int reading_score[N];
int writing_score[N];
int math_score[N];
}
parameters {
real<lower=0> mu[3];     // Means for each subject
real<lower=0> sigma[3];  // Standard deviations for each subject
}
model {
// Priors
for (s in 1:3) {
mu[s] ~ uniform(0, 100);
sigma[s] ~ uniform(0, 100);
}
// Likelihoods
reading_score ~ normal(mu[1], sigma[1]);
writing_score ~ normal(mu[2], sigma[2]);
math_score ~ normal(mu[3], sigma[3]);
}
"
# Fit the model
fit <- stan(model_code = model_code, data = data_list, iter = 1000, chains = 4)
# Print summary of the fit and inspect chains
print(fit)        # Check R-hat and other diagnostics
traceplot(fit)
# Extract posterior samples
posterior_samples <- extract(fit)
# Compute means for mu
mu_mean <- apply(posterior_samples$mu, 2, mean)
# Calculate credibility intervals for mu
mu_ci <- sapply(1:length(subject_levels), function(s) quantile(posterior_samples$mu[, s], probs = c(0.025, 0.975)))
# Calculate credibility intervals for mu
mu_ci <- array(NA, dim = c(3, 2))
for (i in 1:3) {
mu_ci[i, ] <- quantile(posterior_samples$mu[, i], probs = c(0.025, 0.975))
}
View(mu_ci)
View(mu_ci)
# Convert to data frame for plotting
df <- data.frame(
Subject = subject_levels,
Score = mu_mean,
Lower = mu_ci[1, ],
Upper = mu_ci[2, ]
)
# Plot the results
ggplot(df, aes(x = Subject, y = Score, fill = Subject)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = Lower, ymax = Upper), position = position_dodge(0.9), width = 0.25) +
theme_minimal() +
labs(title = "Estimated Test Scores by Subject", y = "Mean Score") +
geom_text(aes(label = round(Score)), vjust = -0.5, position = position_dodge(width = 0.9), size = 3) +
scale_fill_brewer(palette = "Set1")
# Convert to data frame for plotting
df <- data.frame(
Subject = c("Reading", "Writing", "Math"),
Score = mu_mean,
Lower = mu_ci[1, ],
Upper = mu_ci[2, ]
)
mu_mean
mu_ci
# Convert to data frame for plotting
df <- data.frame(
Subject = c("Reading", "Writing", "Math"),
Score = mu_mean,
Lower = mu_ci[, 1],
Upper = mu_ci[, 2]
)
# Plot the results
ggplot(df, aes(x = Subject, y = Score, fill = Subject)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = Lower, ymax = Upper), position = position_dodge(0.9), width = 0.25) +
theme_minimal() +
labs(title = "Estimated Test Scores by Subject", y = "Mean Score") +
geom_text(aes(label = round(Score)), vjust = -0.5, position = position_dodge(width = 0.9), size = 3) +
scale_fill_brewer(palette = "Set1")
# Plot the results
ggplot(df, aes(x = Subject, y = Score, fill = Subject)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = Lower, ymax = Upper), position = position_dodge(0.9), width = 0.25) +
theme_minimal() +
labs(title = "Estimated Test Scores by Subject", y = "Mean Score") +
geom_text(aes(label = round(Score)), vjust = -0.5, position = position_dodge(width = 0.9), size = 3) +
# Plot the results
ggplot(df, aes(x = Subject, y = Score, fill = Subject)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = Lower, ymax = Upper), position = position_dodge(0.9), width = 0.25) +
theme_minimal() +
labs(title = "Estimated Test Scores by Subject", y = "Mean Score") +
geom_text(aes(label = round(Score)), vjust = -0.5, position = position_dodge(width = 0.9), size = 3)
# Plot the results
ggplot(df, aes(x = Subject, y = Score, fill = Subject)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = Lower, ymax = Upper), position = position_dodge(0.9), width = 0.25) +
theme_minimal() +
labs(title = "Estimated Test Scores by Subject", y = "Mean Score") +
geom_text(aes(label = round(Score)), vjust = -0.5, position = position_dodge(width = 0.9), size = 3)
# Plot the results
ggplot(df, aes(x = Subject, y = Score, fill = Subject)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = Lower, ymax = Upper), position = position_dodge(0.9), width = 0.25) +
theme_minimal() +
labs(title = "Estimated Test Scores by Subject", y = "Mean Score") +
geom_text(aes(label = round(Score)), vjust = 1.5, position = position_dodge(width = 0.9), size = 3)
# Plot the results
ggplot(df, aes(x = Subject, y = Score, fill = Subject)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = Lower, ymax = Upper), position = position_dodge(0.9), width = 0.25) +
theme_minimal() +
labs(title = "Estimated Test Scores by Subject", y = "Mean Score") +
geom_text(aes(label = round(Score)), vjust = 1.5, position = position_dodge(width = 0.9))
